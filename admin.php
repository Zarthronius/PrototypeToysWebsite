<!--1.	Create a facility that allows the administrator of the site to edit details of a toy currently held in the database. Components:
•	Choose a toy to edit: the administrator should be able to choose a toy to edit from a list (for best marks created dynamically from the database records using PHP, PDO and SQL) of all the current toys held in the NTL_toys database table by clicking on its toyName
o	Full details of all toys must be included, except the manufacturer. You will need to format the toy details (their layout etc.) in an appropriate way. Toys should be ordered on toyName and you will need to display the category description
•	Edit details of  toy: after choosing an toy (clicking on its toyName) to edit, the user should be able to edit all of the details of that toy, except the toyID, using a form and the toy’s details should be amended in the MySQL database.

Ideally the form should initially display the current category description and manufacturer name as the default values in pre-defined lists that are dynamically generated from database content with one option for each of the categories and manufacturers, respectively, in the database.  You should program this functionality without generating duplicate entries in the list.

•	Server-side data validation and making data safe: the validity of the data entered should be checked and the values made safe for each field used (using PHP) – see task 3 for more details on the requirements for this
Notes
•	To achieve this functionality you should use PHP, including PDO (and not any other database library like mysqli), and SQL and the methods covered in the module
•	It is expected that any output generated by PHP should be HTML compliant
•	You should not display system type attributes to the user, they’re of no interest to the user, so make sure you don’t display any of the ids used in the SQL tables, e.g. catID and manID. You will need to use them, of course, in list boxes or as hidden fields etc. in order to link back to other tables but you shouldn’t display them to the user. Check you don’t.
-->
<?php
ini_set("session.save_path", "/home/unn_w20016567/sessionData");
session_start();

require_once('functions.php');
echo makePageStart("Admin","stylesheet.css");
echo makeHeader("Admin");
echo makeNavMenu("Pages", array("index.php" => "Home", "admin.php" => "Admin", "orderToysForm.php" => "Order", "credits.php" => "Credits"));
echo startAside();
if (check_login()) {
    echo makeLogout();
    echo endAside();
    echo startMain();
    echo "<h2>Toy List</h2>";
    echo "<p>Select a Toy to edit:</p>";
    try {
        $dbConn = getConnection();

        $sqlQuery = "SELECT toyID, toyName, description, catDesc, toyPrice
                FROM NTL_toys
                INNER JOIN NTL_category
                ON NTL_toys.catID = NTL_category.catID
                ORDER BY toyName";

        $queryResult = $dbConn->query($sqlQuery);

        while ($rowObj = $queryResult->fetchObject()) {
            echo "<div class='toy'>\n
            <h3 class='name'>\n
            <a href='editToyForm.php?toyID={$rowObj->toyID}'>{$rowObj->toyName}</a>\n
            </h3>\n
            <p class='description'><strong>Description:</strong> {$rowObj->description}</p>\n
            <p class='categoryDescription'><strong>Category Description:</strong> {$rowObj->catDesc}</p>\n
            <p class='price'><strong>Price:</strong> £{$rowObj->toyPrice}</p>\n
        </div>\n";
        }
    } catch (Exception $e) {
        echo "<p>Whoops! Something went wrong, refresh the page.</p>";
        log_error($e);
        //echo "<p>Query failed: " . $e->getMessage() . "</p>\n";
    }
}
else {
    echo createLoginForm();
    echo endAside();
    echo startMain();
    echo "<h2>Login Required</h2>";
    echo "<p>Must be logged in to access this page\n";
}
echo endMain();
echo makeFooter("This is a fictional site for Northumbria Toys Limited.");
echo makePageEnd();
?>